This is a sketch of an experimental design for a build system where project definitions are written in C.

The build system is packaged as a single shell script which contains the C library code as a heredoc string.

The shell script creates a concatenation from the library code and the file specified as the first command line argument.

Then that is compiled with the system's C compiled and executed.

Note that using some tricks you can write a single file that is both a valid Unix shell script and Windows batch file,
which combined with cross-platform code for the C library would allow a portable single-file build system solution.

Example usage:

Suppose you have a C project with source files bar.c and baz.c and you want to build an executable called foo.

Create foo.bob:

void setup() {
    c_executable("foo");
    source("bar.c");
    source("baz.c");
}

Command line transcript:

$ ./bob.sh foo
PROJECT: foo
INFO:    Compiling C executable 'foo'
COMMAND: gcc -o foo bar.c baz.c

$ ./foo
STUFF
